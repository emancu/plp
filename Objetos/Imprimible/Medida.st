'From Pharo4.0 of 18 March 2013 [Latest update: #40614] on 18 June 2015 at 9:24:43.265311 am'!Object subclass: #Medida	instanceVariableNames: 'unidad cantidad'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!Medida commentStamp: 'EmilianoMancuso 6/18/2015 09:22' prior: 0!Medida docs!!Medida methodsFor: 'attr_accessors' stamp: 'EmilianoMancuso 6/18/2015 00:09'!cantidad	^ cantidad.! !!Medida methodsFor: 'attr_accessors' stamp: 'EmilianoMancuso 6/18/2015 00:10'!unidad	^ unidad.! !!Medida methodsFor: 'operators' stamp: 'bcardiff 6/9/2015 20:48'!adaptToNumber: anInteger andSend: aString	| msg |	msg := aString. 	aString = #/ ifTrue: [ 		msg := #divInv:	].	^ self perform: msg with: anInteger! !!Medida methodsFor: 'operators' stamp: 'EmilianoMancuso 6/15/2015 23:51'!* otro 	|tmpUnit tmpAmount|	tmpUnit := self unidad * otro unidad.	tmpAmount := self cantidad * otro cantidad.		^ Medida deUnidad: tmpUnit  representandoCantidad: tmpAmount.! !!Medida methodsFor: 'operators' stamp: 'EmilianoMancuso 6/18/2015 00:09'!+ otro 	^ unidad = otro unidad 		ifFalse: [ NonMatchingUnits signal]	 	ifTrue:[			Medida deUnidad: unidad representandoCantidad: (cantidad + otro cantidad).		].! !!Medida methodsFor: 'operators' stamp: 'EmilianoMancuso 6/16/2015 02:50'!- otro 	^ self + (otro * -1).! !!Medida methodsFor: 'operators' stamp: 'EmilianoMancuso 6/17/2015 02:46'!/ otro 	|tmpUnit tmpAmount|	tmpUnit := self unidad / otro unidad.	tmpAmount := self cantidad / otro cantidad.		^ Medida deUnidad: tmpUnit  representandoCantidad: tmpAmount.! !!Medida methodsFor: 'operators' stamp: 'EmilianoMancuso 6/18/2015 00:09'!= unaMedida	"Una medida es igual a otra si tienen la misma Unidad y misma Cantidad"		|sameUnit sameAmount|	sameUnit := self unidad = unaMedida unidad.	sameAmount := self cantidad = unaMedida cantidad.		^ sameUnit ifTrue: [ sameAmount ] ifFalse: [ false ].! !!Medida methodsFor: 'operators' stamp: 'EmilianoMancuso 6/17/2015 02:51'!divInv: otro 	^ Medida deUnidad: otro unidad / unidad representandoCantidad: otro / cantidad.! !!Medida methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/15/2015 23:57'!segundo	^self * 1 segundo.! !!Medida methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/14/2015 17:17'!initializeUnit: anUnidadBasica initializeAmount: anInteger 	unidad := anUnidadBasica.	cantidad := anInteger.! !!Medida methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/17/2015 03:12'!printOn: aStream		aStream nextPutAll: (self cantidad asString).	(unidad == Unidad escalar) ifFalse: [			aStream nextPutAll: ' '.			unidad printOn: aStream.		].! !!Medida methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/17/2015 02:46'!isZero	^ cantidad isZero.! !!Medida methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/15/2015 23:57'!metro	^ self * 1 metro.! !!Medida methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/15/2015 23:56'!kilogramo	^ self * 1 kilogramo.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Medida class	instanceVariableNames: ''!!Medida class methodsFor: 'constructors' stamp: 'EmilianoMancuso 6/14/2015 17:10'!deUnidad: aUnit representandoCantidad: anAmount	^ self new initializeUnit: aUnit initializeAmount: anAmount.! !