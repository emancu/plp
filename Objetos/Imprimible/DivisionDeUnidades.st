'From Pharo4.0 of 18 March 2013 [Latest update: #40614] on 18 June 2015 at 9:24:42.882127 am'!Unidad subclass: #DivisionDeUnidades	instanceVariableNames: 'numerador denominador'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP-TP-2015C1'!!DivisionDeUnidades commentStamp: 'EmilianoMancuso 6/18/2015 09:22' prior: 0!DivisionDeUnidades docs.!!DivisionDeUnidades methodsFor: 'attr_accessors' stamp: 'EmilianoMancuso 6/16/2015 04:15'!denominador	^ denominador! !!DivisionDeUnidades methodsFor: 'attr_accessors' stamp: 'EmilianoMancuso 6/16/2015 04:07'!numerador	^ numerador! !!DivisionDeUnidades methodsFor: 'constructor' stamp: 'EmilianoMancuso 6/18/2015 02:11'!initNumerator: numCollection andDenominator: denCollection	numerador := numCollection asArray.	denominador := denCollection asArray.! !!DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/16/2015 04:46'!dividiendoProducto: aProdUnit 	^ DivisionDeUnidades de: (aProdUnit factores, denominador) sobre: numerador. ! !!DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/17/2015 02:38'!* aUnit 	^ aUnit productoDivision: self.! !!DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/16/2015 04:26'!dividiendoEscalar: anUnidadEscalar 	^ DivisionDeUnidades de: denominador sobre: numerador. ! !!DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/18/2015 03:35'!= otraUnidad	"Son iguales si tienen los mismos factores"		self class = otraUnidad class 		ifTrue: [			^ numerador asBag = (otraUnidad numerador) asBag			  and: denominador asBag = (otraUnidad denominador) asBag		] ifFalse: [ ^ false ].! !!DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/17/2015 02:37'!productoDivision: aDivUnit	^ DivisionDeUnidades de: numerador, aDivUnit numerador sobre: denominador, aDivUnit denominador.! !!DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/18/2015 09:01'!contiene: aUnit 	^ aUnit contenidoEnDivision: self.! !!DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/18/2015 09:06'!contenidoEnProducto: aProductoDeUnidades 	^ false.! !!DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/17/2015 02:35'!productoProducto: aProdUnit	^ DivisionDeUnidades de: numerador, aProdUnit factores sobre: denominador .! !!DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/18/2015 02:23'!dividiendoDivision: aDivUnit 	| aux |	aux := denominador , aDivUnit numerador. 	denominador := numerador, aDivUnit denominador.	numerador := aux.		^ DivisionDeUnidades de: numerador sobre: denominador.! !!DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/17/2015 01:41'!/ aUnit	^ aUnit dividiendoDivision: self.! !!DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/18/2015 09:00'!printOn: aStream		| aux nombres auxNum auxDen tmpUnit |	nombres := OrderedCollection new.   auxNum := numerador asOrderedCollection.	auxDen := denominador asOrderedCollection.	tmpUnit := DivisionDeUnidades de: auxNum sobre: auxDen.		Unidad renombres keysAndValuesDo: [ :key :value |		(tmpUnit contiene: value) ifTrue: [ 			nombres add: key. 			value numerador do: [ :e | auxNum remove: e ifAbsent: [ ] ].			value denominador do: [ :e | auxDen remove: e ifAbsent: [ ] ].			tmpUnit := DivisionDeUnidades de: auxNum sobre: auxDen.		].	].		auxNum do: [ :f | nombres add: (f nombre) ].	nombres ifEmpty: [ nombres := '1' ]. 	nombres asStringOn: aStream delimiter: ' '.		auxDen ifNotEmpty: [ 		aStream nextPutAll: ' / '.			aux := auxDen collect: [ :f | f nombre ].		aux asStringOn: aStream delimiter: ' '.	].! !!DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/18/2015 02:28'!dividiendoBasica: anUnidadBasica 	^ DivisionDeUnidades de: (denominador, {anUnidadBasica}) sobre: numerador. ! !!DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/18/2015 09:11'!contenidoEnDivision: aDivUnit 	| checkInclusion |	checkInclusion := [ :smallBag :bigBag |		smallBag doWithOccurrences: [ :e :r |			r <= (bigBag occurrencesOf: e) ifFalse: [ ^ false ].		].	].		checkInclusion value: numerador asBag value: (aDivUnit numerador asBag).	checkInclusion value: denominador asBag value: (aDivUnit denominador asBag).		^ true.! !!DivisionDeUnidades methodsFor: 'as yet unclassified' stamp: 'EmilianoMancuso 6/17/2015 02:34'!productoBasica: anUnidadBasica 	^ DivisionDeUnidades de: numerador, { anUnidadBasica } sobre: denominador.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DivisionDeUnidades class	instanceVariableNames: ''!!DivisionDeUnidades class methodsFor: 'constructor' stamp: 'EmilianoMancuso 6/18/2015 02:24'!de: numCollection sobre: denCollection	| newNum newDen aBlock |	denCollection ifEmpty: [ ^ ProductoDeUnidades de: numCollection ].	"Simplify collections before creation"	newNum := numCollection asBag. newDen := denCollection asBag.	aBlock := [ :original :aBag | original do: [ :e | aBag remove: e ifAbsent: [  ] ] ].		aBlock value: numCollection value: newDen.	aBlock value: denCollection value: newNum.		newDen ifEmpty: [ ^ ProductoDeUnidades de: newNum ].		^ self new initNumerator: newNum andDenominator: newDen! !